
    async def player_turn(self):
        await self.log(f"Player turn start\n")
        await self.player.draw(1)
        self.player.resources["energy"] += 2
        self.player.resources["energy"] = min(self.player.resources["energy"], 10)
        while True:
            await self.status_bar_update()
            card = await self.user_select("Select a card to play", self.card_selector(self.player.hand), required=False)
            if not card:
                await self.log("You have no cards to play or opted to skip.")
                break
            elif card.cost > self.player.resources["energy"]:
                await self.log("You don't have enough energy to play that card.")
                continue
            if card and card.cost <= self.player.resources["energy"]:
                if card.requires_target:
                    target = await self.user_select("Select a target", self.target_selector(), required=True)
                else:
                    target = None
                await self.log(f"{self.player.name} plays {str(card)}", user_ack=True)
                await card.on_play(self, self.player, target)
                self.player.hand.remove(card)
                self.player.resources["energy"] -= card.cost
                self.check_win_condition()
        await self.status_bar_update()
        await self.log("Player turn over\n\n", user_ack=True)


    async def enemy_turn(self):
        await self.status_bar_update()
        await self.log("Enemy turn start\n")
        await self.enemy.draw(1)
        self.enemy.resources["energy"] += 2
        self.enemy.resources["energy"] = min(self.enemy.resources["energy"], 10)
        while True:
            viable = [card for card in self.enemy.hand if card.cost <= self.enemy.resources["energy"]]
            if not viable:
                break
            card = random.choice(viable)
            self.enemy.hand.remove(card)
            # This is from the perspective of the enemy
            if self.agents.target(card) == "enemy":
                target = self.player
            else:
                target = self.enemy
            await self.log(f"{self.enemy.name} plays {str(card)}")
            await card.on_play(self, self.enemy, target)
            self.enemy.resources["energy"] -= card.cost
            self.check_win_condition()
        await self.status_bar_update()
        await self.log("Enemy turn over\n\n", user_ack=True)

        
    # if he_who_plays == self.player:
    #     await self.player_turn()
    # else:
    #     await self.enemy_turn()



    # self.check_win_condition()
    # for status in self.enemy.statuses:
    #     await self.log(f"Applying {str(status)} to {self.enemy.name}", )
    #     status.on_game_loop(self, self.enemy)
    #     self.check_win_condition()
    
    # for status in self.player.statuses:
    #     await self.log(f"Applying {str(status)} to {self.player.name}")
    #     status.on_game_loop(self, self.player)
    #     self.check_win_condition()
    # await asyncio.sleep(.5)

---


# class MindRot(Status):
#     def __init__(self, remaining_turns: int):
#         super().__init__("Mind Rot", "Hand destruction", remaining_turns)

#     def on_game_loop(self, state, being):
#         if (being.name == "Player"):
#             card = user_select_card_in_hand(being.hand)
#         else:
#             card = random.choice(being.hand)
#             being.hand.remove(card)

class EldritchHex(Status):
    def __init__(self, stacks, remaining_turns):
        super().__init__("Eldritch Hex", "A creeping curse that amplifies damage taken.", remaining_turns)
        self.stacks = stacks

    def on_take_damage(self, state, source, target, amount) -> int:
        return int(amount + self.stacks)

    def __add__(self, other):
        self.stacks += other.stacks
        self.remaining_turns = max(self.remaining_turns, other.remaining_turns)
        return self



class ShiftingNightmare(Status):
    def __init__(self, remaining_turns):
        super().__init__("Shifting Nightmare", 
                         "Randomly drains HP or grants a short-lived power boost each turn.", 
                         remaining_turns)

    def on_game_loop(self, state, being):
        """
        Each turn, there's a 50% chance to drain 2 HP.
        Otherwise, grants a temporary +2 attack bonus, 
        which is reset at the beginning of each new turn. 
        """
        
        # 50% chance for negative effect
        if random.random() < 0.5:
            being.hp -= 2
        else:
            being.statuses.append(Berserk(remaining_turns=2))

    def __add__(self, other):
        self.remaining_turns = max(self.remaining_turns, other.remaining_turns)
        return self


# TODO: environment statuses probably need to be a different class
# class AcidFog(Status):
#     def __init__(self, remaining_turns: int):
#         super().__init__("Acid Fog", "Deal damage to all", remaining_turns)

#     def on_game_loop(self, state: State, being: Being):
#         for other in state.beings:
#             if other != being:
#                 other.hp -= 1

class MaddeningWhispers(Status):
    def __init__(self, remaining_turns: int):
        super().__init__("Maddening Whispers", 
                        "Each turn, has a chance to copy a random status from another being", 
                        remaining_turns)

    def on_game_loop(self, state: State, being: Being):
        if not state.beings:
            return
            
        other_beings = [b for b in state.beings if b != being]
        if not other_beings:
            return
            
        target = random.choice(other_beings)
        if target.statuses and random.random() < 0.4:  # 40% chance
            status_to_copy = random.choice(target.statuses)
            being.statuses.append(status_to_copy.__class__(remaining_turns=2))

class TimeDilation(Status):
    def __init__(self, remaining_turns: int):
        super().__init__("Time Dilation", 
                        "Status effects tick twice per turn, but healing is reduced", 
                        remaining_turns)

    def on_game_loop(self, state: State, being: Being):
        # Trigger all other statuses an extra time
        for status in being.statuses:
            if status != self:
                status.on_game_loop(state, being)
    
    def on_heal(self, state: State, being: Being, amount: int) -> int:
        return math.floor(amount * 0.5)  # Healing is halved



class EldritchCurse(CardBase):
    def __init__(self):
        super().__init__("Eldritch Curse", 2, "Apply 2 Eldritch Hex and deal 3 damage.", requires_target=True)

    async def on_play(self, state, being, target):
        target.statuses.append(EldritchHex(stacks=2, remaining_turns=2))
        await state.deal_damage(source=being, target=target, amount=3)

class BloodRitual(CardBase):
    def __init__(self):
        super().__init__("Blood Ritual", 3, "Gain Frenzied Bloodlust with 4 power for 3 turns.", requires_target=False)

    async def on_play(self, state, being, target):
        being.statuses.append(FrenziedBloodlust(power_boost=4, remaining_turns=3))

class NightmareVisions(CardBase):
    def __init__(self):
        super().__init__("Nightmare Visions", 1, "Apply Shifting Nightmare for 3 turns and draw a card.", requires_target=True)

    async def on_play(self, state, being, target):
        target.statuses.append(ShiftingNightmare(remaining_turns=3))
        await being.draw(1)

class ToughShell(CardBase):
    def __init__(self):
        super().__init__("Tough Shell", 2, "Gain 8 block and Tough status for 2 turns.", requires_target=False)
    
    async def on_play(self, state, being, target):
        being.block += 8
        being.statuses.append(Tough(remaining_turns=2))

class WhispersOfMadness(CardBase):
    def __init__(self):
        super().__init__("Whispers of Madness", 2, "Apply Maddening Whispers for 3 turns and draw a card.", requires_target=True)

    async def on_play(self, state, being, target):
        target.statuses.append(MaddeningWhispers(remaining_turns=3))
        await being.draw(1)

class TemporalDistortion(CardBase):
    def __init__(self):
        super().__init__("Temporal Distortion", 3, "Apply Time Dilation for 2 turns and gain 10 block.", requires_target=True)

    async def on_play(self, state, being, target):
        target.statuses.append(TimeDilation(remaining_turns=2))
        being.block += 10

class RealityTear(CardBase):
    def __init__(self):
        super().__init__("Reality Tear", 2, "Deal 7 damage and apply Reality Bleed for 3 turns.", requires_target=True)

    async def on_play(self, state, being, target):
        await state.deal_damage(source=being, target=target, amount=7)
        target.statuses.append(RealityBleed(remaining_turns=3))

class ChaosEmbrace(CardBase):
    def __init__(self):
        super().__init__("Chaos Embrace", 3, "Apply Reality Bleed and Shifting Nightmare for 2 turns.", requires_target=True)

    async def on_play(self, state, being, target):
        target.statuses.append(RealityBleed(remaining_turns=2))
        target.statuses.append(ShiftingNightmare(remaining_turns=2))

class TimeLoop(CardBase):
    def __init__(self):
        super().__init__("Time Loop", 1, "Apply Time Dilation to yourself for 1 turn and draw 2 cards.", requires_target=False)

    async def on_play(self, state, being, target):
        being.statuses.append(TimeDilation(remaining_turns=1))
        await being.draw(2)


class StatusMirror(CardBase):
    def __init__(self):
        super().__init__("Status Mirror", 2, "Copy all status effects from target to yourself.", requires_target=True)

    async def on_play(self, state, being, target):
        for status in target.statuses:
            being.statuses.append(status.__class__(remaining_turns=status.remaining_turns))

class TimeStop(CardBase):
    def __init__(self):
        super().__init__("Time Stop", 3, "Double the duration of all your status effects.", requires_target=False)

    async def on_play(self, state, being, target):
        for status in being.statuses:
            status.remaining_turns *= 2

class StatusThief(CardBase):
    def __init__(self):
        super().__init__("Status Thief", 2, "Transfer all positive status effects from target to yourself.", requires_target=True)

    async def on_play(self, state, being, target):
        positive_statuses = [Berserk, Tough]  # List of positive status effect classes
        for status in target.statuses[:]:  # Create a copy of the list to modify during iteration
            if any(isinstance(status, pos_status) for pos_status in positive_statuses):
                being.statuses.append(status)
                target.statuses.remove(status)
